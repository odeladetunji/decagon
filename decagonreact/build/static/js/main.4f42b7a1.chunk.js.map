{"version":3,"sources":["App.tsx","LandingPage.tsx","reportWebVitals.ts","index.tsx"],"names":["App","param","useState","countries","setCountries","Boolean","expiredToken","setExpiredToken","showAppPage","className","placeholder","onChange","event","countryName","target","value","console","log","axios","method","url","headers","authToken","then","response","data","catch","err","fetchCountries","map","element","useEffect","LandingPage","username","setUsername","password","setPassword","isAppRoute","setIsApproute","setAuthToken","onSubmit","preventDefault","navigateToSearchPage","type","required","usernameChangeEvent","passwordChangeEvent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","history","createBrowserHistory","ReactDOM","render","StrictMode","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.4f42b7a1.chunk.js","sourcesContent":["import React, { ChangeEvent, useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport LandingPage from './LandingPage';\n\nfunction App(param: any) {\n  \n  const [countries, setCountries] = useState([]);\n  const [expiredToken, setExpiredToken] = useState(Boolean); \n\n  const fetchCountries = (event: ChangeEvent) => {\n     let countryName = event.target as HTMLInputElement;\n\n     if(countryName.value == \"\")\n        return;\n     console.log(param)\n     axios({\n      method: \"GET\",\n      url: \"http://localhost:7000/search/country?name=\" + countryName.value,\n      headers: { \"Content-Type\": \"application/json\", \"authorization\": \"Bearer \" + param.authToken }\n      }).then((response: any)=>{\n        \n        if(response.data == \"Your Token has expired, please get a new token\")\n            setExpiredToken(true);\n\n        setCountries(response.data)\n        // console.log(response.data)\n\n      }).catch(err=>{ \n           console.log(err);\n      })\n  }\n\n  const displayCountries = () => {\n       let result = countries.map(element => {\n           return (<div className=\"countries\">\n           <p><span>{\"Country:\"}</span> </p>\n           <p><span>Region: </span> North America</p>\n           <p><span>Calling codes</span></p>\n           <ul>\n             <li>444</li>\n             <li>222</li>\n             <li>333</li>\n           </ul>\n        </div>);\n       });\n\n       return result;\n  }\n\n  const showAppPage = () => {\n      return (\n               <div className=\"App\">\n\n                   <div className=\"containerForLabel\"><label> Country Search</label></div>\n                   <input placeholder=\"Type a country name here\" className=\"search\" onChange={event => fetchCountries(event)}></input>\n\n                   <div className=\"countryListing\">\n                   {displayCountries()}\n                   </div>    \n\n                </div>\n      )\n  }\n\n  const toggleBtwLoginOrLandingPage = () => {\n\n    if(expiredToken) return <LandingPage />\n\n    return showAppPage();\n  }\n\n  useEffect(() => {\n    console.log(\"Do nothing\");\n  }, [countries]);\n\n  return (\n     toggleBtwLoginOrLandingPage()\n  );\n}\n\nexport default App;\n","import React, { ChangeEvent, FormEvent, useEffect, useState } from 'react';\nimport './App.css';\nimport App from './App';\nimport axios from 'axios';\n\nfunction LandingPage() {\n  \n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isAppRoute, setIsApproute] = useState(Boolean);\n  const [authToken, setAuthToken] = useState(\"\")\n  \n  const navigateToSearchPage = (event: FormEvent) => {\n    event.preventDefault();\n    console.log(username);\n    console.log(password)\n\n     if(username != \"\" && password != \"\"){\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:7000/fetchToken\",\n            headers: {\"Content-Type\": \"application/json\"}\n            }).then((response: any)=>{\n                setAuthToken(response.data)\n              console.log(response.data)\n            }).catch(err=>{ \n                 console.log(err);\n            })\n\n         setIsApproute(true);\n     }\n}\n\nconst usernameChangeEvent = (event: ChangeEvent) => {\n  let username = event.target as HTMLInputElement;\n  setUsername(username.value);\n}\n\nconst passwordChangeEvent = (event: ChangeEvent) => {\n     let password = event.target as HTMLInputElement;\n     setPassword(password.value)\n}\n\nconst displayLoginOrSearchPage = () => {\n\n    if(isAppRoute)\n        return <App authToken={authToken}/>\n\n     return (<div className=\"Login\">\n        <form onSubmit={(event) => navigateToSearchPage(event)}>\n            <p className=\"getAccessToken\">Get New Access Token</p>\n            <input placeholder=\"username\" className=\"login\" type=\"email\" \n                     required onChange={event => usernameChangeEvent(event)}></input>\n\n            <input placeholder=\"password\" className=\"login\" type=\"password\" \n                     required onChange={event => passwordChangeEvent(event)}></input>\n\n            <button>open the door please</button>\n        </form>\n   </div>)\n\n}\n\n  return (\n    <div>\n         {displayLoginOrSearchPage()}\n    </div>\n  );\n}\n\nexport default LandingPage;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './Login';\nimport LandingPage from './LandingPage';\nimport reportWebVitals from './reportWebVitals';\nimport { createBrowserHistory } from \"history\";\nimport {\n  BrowserRouter,\n  Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nconst history = createBrowserHistory();\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <Router history={history}>\n       <Switch>\n          {/* <Route path=\"/\" component={Login} />\n          <Route path=\"/search\" component={App} /> */}\n          <Route path=\"/\" component={LandingPage} />\n       </Switch>\n    </Router>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}